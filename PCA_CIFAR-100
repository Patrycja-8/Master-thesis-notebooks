{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8395029,"sourceType":"datasetVersion","datasetId":4966955}],"dockerImageVersionId":30699,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nfrom torch import Tensor\nimport torchvision\nfrom torch.utils.data import DataLoader\nfrom torchvision.models import resnet101, resnet50, resnet18\nfrom torchinfo import summary\nimport torchvision.transforms as tt\nfrom torchvision.datasets import CIFAR100 \nimport torch.optim as optim\nimport time\nimport torch.backends.cudnn as cudnn\nimport numpy as np\nimport torchvision\nfrom torchvision import datasets, models, transforms\nimport matplotlib.pyplot as plt\nimport time\nimport os\nfrom PIL import Image\nfrom tempfile import TemporaryDirectory\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader\nimport torchvision.transforms as transforms\nfrom torchvision.datasets import CIFAR10\nfrom torchinfo import summary\nimport matplotlib.pyplot as plt\nfrom torch.utils.data import DataLoader\nfrom tqdm import tqdm","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:16:53.515073Z","iopub.execute_input":"2024-05-20T11:16:53.515418Z","iopub.status.idle":"2024-05-20T11:16:59.414883Z","shell.execute_reply.started":"2024-05-20T11:16:53.515390Z","shell.execute_reply":"2024-05-20T11:16:59.414083Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.decomposition import PCA","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:16:59.416742Z","iopub.execute_input":"2024-05-20T11:16:59.417215Z","iopub.status.idle":"2024-05-20T11:17:00.572507Z","shell.execute_reply.started":"2024-05-20T11:16:59.417184Z","shell.execute_reply":"2024-05-20T11:17:00.571704Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"torch.manual_seed(0)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:17:00.573675Z","iopub.execute_input":"2024-05-20T11:17:00.574242Z","iopub.status.idle":"2024-05-20T11:17:00.584211Z","shell.execute_reply.started":"2024-05-20T11:17:00.574208Z","shell.execute_reply":"2024-05-20T11:17:00.583334Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!rm -rf /kaggle/working/*","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Stat and transform","metadata":{}},{"cell_type":"code","source":"stats=((0.50736207, 0.4866896, 0.44108862), (0.26748815, 0.2565931, 0.2763085))\ntrain_transform = tt.Compose([\n    tt.RandomHorizontalFlip(),\n    tt.RandomCrop(32, padding=4, padding_mode=\"reflect\"),\n    tt.ToTensor(),\n    tt.Normalize(*stats)\n])\n\ntest_transform = tt.Compose([\n    tt.ToTensor(),\n    tt.Normalize(*stats)\n])","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:17:00.586192Z","iopub.execute_input":"2024-05-20T11:17:00.586966Z","iopub.status.idle":"2024-05-20T11:17:00.593249Z","shell.execute_reply.started":"2024-05-20T11:17:00.586903Z","shell.execute_reply":"2024-05-20T11:17:00.592314Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 100 classes","metadata":{}},{"cell_type":"code","source":"train_data = CIFAR100(download=True, root=\"./data\", transform=train_transform)\ntest_data = CIFAR100(root=\"./data\", train=False, transform=test_transform)\nbatch_size=128\nnum_work=4\ntrain_dl = DataLoader(train_data, batch_size, shuffle=True, num_workers=num_work, pin_memory=True)\ntest_dl = DataLoader(test_data, batch_size, shuffle=True, num_workers=num_work, pin_memory=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:17:02.414121Z","iopub.execute_input":"2024-05-20T11:17:02.414474Z","iopub.status.idle":"2024-05-20T11:17:08.229590Z","shell.execute_reply.started":"2024-05-20T11:17:02.414449Z","shell.execute_reply":"2024-05-20T11:17:08.228618Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 20 classes","metadata":{}},{"cell_type":"code","source":"class CIFAR100Coarse(torch.utils.data.Dataset):\n    def __init__(self, cifar100_dataset) ->None:\n        self.cifar100_dataset = cifar100_dataset\n        \n        # Define the mapping from fine labels to coarse labels\n        self.fine_to_coarse={\n            0: 4, 1: 1, 2: 14, 3: 8, 4: 0, 5: 6, 6: 7, 7: 7, 8: 18, 9: 3,\n            10: 3, 11: 14, 12: 9, 13: 18, 14: 7, 15: 11, 16: 3, 17: 9, 18: 7,\n            19: 11, 20: 6, 21: 11, 22: 5, 23: 10, 24: 7, 25: 6, 26: 13, 27: 15,\n            28: 3, 29: 15, 30: 0, 31: 11, 32: 1, 33: 10, 34: 12, 35: 14, 36: 16,\n            37: 9, 38: 11, 39: 5, 40: 5, 41: 19, 42: 8, 43: 8, 44: 15, 45: 13,\n            46: 14, 47: 17, 48: 18, 49: 10, 50: 16, 51: 4, 52: 17, 53: 4, 54: 2,\n            55: 0, 56: 17, 57: 4, 58: 18, 59: 17, 60: 10, 61: 3, 62: 2, 63: 12,\n            64: 12, 65: 16, 66: 12, 67: 1, 68: 9, 69: 19, 70: 2, 71: 10, 72: 0,\n            73: 1, 74: 16, 75: 12, 76: 9, 77: 13, 78: 15, 79: 13, 80: 16, 81: 19,\n            82: 2, 83: 4, 84: 6, 85: 19, 86: 5, 87: 5, 88: 8, 89: 19, 90: 18, 91: 1,\n            92: 2, 93: 15, 94: 6, 95: 0, 96: 17, 97: 8, 98: 14, 99: 13\n        }\n        \n        # Mapping from superclass labels to superclass names\n        self.coarse_label_names = {\n            0: 'aquatic mammals',\n            1: 'fish',\n            2: 'flowers',\n            3: 'food containers',\n            4: 'fruit and vegetables',\n            5: 'household electrical devices',\n            6: 'household furniture',\n            7: 'insects',\n            8: 'large carnivores',\n            9: 'large man-made outdoor things',\n            10: 'large natural outdoor scenes',\n            11: 'large omnivores and herbivores',\n            12: 'medium-sized mammals',\n            13: 'non-insect invertebrates',\n            14: 'people',\n            15: 'reptiles',\n            16: 'small mammals',\n            17: 'trees',\n            18: 'vehicles 1',\n            19: 'vehicles 2'\n        }\n\n    def __getitem__(self, index):\n        img, target = self.cifar100_dataset[index]\n\n        # Convert fine label to coarse label\n        target = self.fine_to_coarse[target]\n\n        return img, target\n\n    def __len__(self):\n        return len(self.cifar100_dataset)\n\n    def get_coarse_label_name(self, label):\n        return self.coarse_label_names[label]\n\n    def get_all_coarse_label_names(self):\n        return self.coarse_label_names.values()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:17:08.231708Z","iopub.execute_input":"2024-05-20T11:17:08.232168Z","iopub.status.idle":"2024-05-20T11:17:08.247532Z","shell.execute_reply.started":"2024-05-20T11:17:08.232136Z","shell.execute_reply":"2024-05-20T11:17:08.246725Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data_20=CIFAR100Coarse(train_data)\ntest_data_20=CIFAR100Coarse(test_data)\nbatch_size=128\nnum_work=4\ntrain_dl_20 = DataLoader(train_data_20, batch_size, shuffle=True, num_workers=num_work, pin_memory=True)\ntest_dl_20 = DataLoader(test_data_20, batch_size, shuffle=True, num_workers=num_work, pin_memory=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:17:08.248749Z","iopub.execute_input":"2024-05-20T11:17:08.249381Z","iopub.status.idle":"2024-05-20T11:17:08.259786Z","shell.execute_reply.started":"2024-05-20T11:17:08.249349Z","shell.execute_reply":"2024-05-20T11:17:08.259034Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Device","metadata":{}},{"cell_type":"code","source":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(device)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:17:08.261266Z","iopub.execute_input":"2024-05-20T11:17:08.261524Z","iopub.status.idle":"2024-05-20T11:17:08.300327Z","shell.execute_reply.started":"2024-05-20T11:17:08.261502Z","shell.execute_reply":"2024-05-20T11:17:08.299466Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Model path -> 20 superclasses","metadata":{}},{"cell_type":"code","source":"saved_model_path='/kaggle/input/cifar-models/cifar100_20classes_50ep.pth' #83.87","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:17:13.088552Z","iopub.execute_input":"2024-05-20T11:17:13.088933Z","iopub.status.idle":"2024-05-20T11:17:13.095241Z","shell.execute_reply.started":"2024-05-20T11:17:13.088903Z","shell.execute_reply":"2024-05-20T11:17:13.094499Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class FeatureExtractor(nn.Module):\n    def __init__(self, base_model):\n        super(FeatureExtractor, self).__init__()\n        self.features = nn.Sequential(*list(base_model.children())[:-1])\n\n    def forward(self, x):\n        return self.features(x)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:17:17.556459Z","iopub.execute_input":"2024-05-20T11:17:17.556835Z","iopub.status.idle":"2024-05-20T11:17:17.562585Z","shell.execute_reply.started":"2024-05-20T11:17:17.556806Z","shell.execute_reply":"2024-05-20T11:17:17.561616Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"checkpoint = torch.load(saved_model_path)\nnum_classes = 20\n\nnet = resnet18(weights=None)\nnet.conv1 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1, bias=False)\nnet.maxpool = nn.Identity()\nnet.fc = nn.Linear(512, num_classes)\nnet.load_state_dict(checkpoint['model_state_dict'])\nnet.to(device)\n\nmodel_pca = resnet18(weights=None)\nmodel_pca.conv1 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1, bias=False)\nmodel_pca.maxpool = nn.Identity()\nmodel_pca.fc = nn.Linear(512, num_classes)\nmodel_pca.load_state_dict(checkpoint['model_state_dict'])\nmodel_pca.fc=nn.Identity()\nmodel_pca.to(device)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:17:17.870156Z","iopub.execute_input":"2024-05-20T11:17:17.871137Z","iopub.status.idle":"2024-05-20T11:17:19.255763Z","shell.execute_reply.started":"2024-05-20T11:17:17.871089Z","shell.execute_reply":"2024-05-20T11:17:19.254855Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_pca = FeatureExtractor(net)\nmodel_pca.to(device)\nmodel_pca.eval()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:17:26.564361Z","iopub.execute_input":"2024-05-20T11:17:26.565072Z","iopub.status.idle":"2024-05-20T11:17:26.574619Z","shell.execute_reply.started":"2024-05-20T11:17:26.565034Z","shell.execute_reply":"2024-05-20T11:17:26.573716Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"counter = 1\nfeatures = []\nlabels = []\n\nwith torch.no_grad():\n    for (inputs, targets) in train_dl_20:\n        inputs, targets = inputs.to(device), targets.to(device)\n        for i in range(len(targets)):\n            labels.append(targets[i].to('cpu'))\n        outputs = model_pca(inputs).to(device)\n        for i in range(len(outputs)):\n            output = torch.flatten(outputs[i])\n            features.append(output.to('cpu'))\n        #print('Batch ', counter, '/', len(train_dl_20))\n        counter = counter + 1","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:17:28.871691Z","iopub.execute_input":"2024-05-20T11:17:28.872555Z","iopub.status.idle":"2024-05-20T11:17:44.430358Z","shell.execute_reply.started":"2024-05-20T11:17:28.872499Z","shell.execute_reply":"2024-05-20T11:17:44.429257Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"features_np = [x.numpy() for x in features]\nfeatures_np = np.array(features_np)\n\nlabels_np = np.array([y.squeeze().numpy() for y in labels])","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:17:44.432165Z","iopub.execute_input":"2024-05-20T11:17:44.432461Z","iopub.status.idle":"2024-05-20T11:17:45.085937Z","shell.execute_reply.started":"2024-05-20T11:17:44.432437Z","shell.execute_reply":"2024-05-20T11:17:45.085103Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"features_col = ['Feature' + str(i) for i in range(features_np.shape[1])]\ndf_cifar = pd.DataFrame(features_np, columns = features_col)\ndf_cifar['Label'] = labels_np","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:17:45.087358Z","iopub.execute_input":"2024-05-20T11:17:45.087701Z","iopub.status.idle":"2024-05-20T11:17:45.100363Z","shell.execute_reply.started":"2024-05-20T11:17:45.087673Z","shell.execute_reply":"2024-05-20T11:17:45.099173Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = df_cifar.iloc[:, :-1]  #features bo bez ostatniej col\ny = df_cifar['Label']  #labels","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:17:45.102604Z","iopub.execute_input":"2024-05-20T11:17:45.102951Z","iopub.status.idle":"2024-05-20T11:17:45.153456Z","shell.execute_reply.started":"2024-05-20T11:17:45.102926Z","shell.execute_reply":"2024-05-20T11:17:45.152685Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## PCA(2)","metadata":{}},{"cell_type":"code","source":"pca_model = PCA(n_components=2)\nconverted_data = pca_model.fit_transform(X)\n\ndf_converted_data = pd.DataFrame(data=converted_data, columns=['Principal Component 1', 'Principal Component 2'])\ndf_converted_data['Label'] = y","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:17:45.154737Z","iopub.execute_input":"2024-05-20T11:17:45.155552Z","iopub.status.idle":"2024-05-20T11:17:45.717674Z","shell.execute_reply.started":"2024-05-20T11:17:45.155518Z","shell.execute_reply":"2024-05-20T11:17:45.716011Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"targets = df_converted_data['Label'].unique()\ntargets","metadata":{"execution":{"iopub.status.busy":"2024-05-16T16:21:12.594919Z","iopub.execute_input":"2024-05-16T16:21:12.595785Z","iopub.status.idle":"2024-05-16T16:21:12.606703Z","shell.execute_reply.started":"2024-05-16T16:21:12.595746Z","shell.execute_reply":"2024-05-16T16:21:12.605401Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"targets = np.asarray(range(0,20))","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:17:49.582551Z","iopub.execute_input":"2024-05-20T11:17:49.583493Z","iopub.status.idle":"2024-05-20T11:17:49.587954Z","shell.execute_reply.started":"2024-05-20T11:17:49.583456Z","shell.execute_reply":"2024-05-20T11:17:49.586894Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(15, 10))\n#colors = plt.cm.get_cmap('tab20', len(targets))\ncolors = [\n    \"#FF5733\", \"#FFC300\", \"#4CAF50\", \"#00BCD4\", \"#2196F3\",\n    \"#3F51B5\", \"#9C27B0\", \"#FF4081\", \"#4CAF50\", \"#FF9800\",\n    \"#9E9D24\", \"#3E2723\", \"#FF5722\", \"#E91E63\", \"#673AB7\",\n    \"#009688\", \"#FFEB3B\", \"#607D8B\", \"#03A9F4\", \"#FF5722\"\n]\nfor i, target in enumerate(targets):\n    plt.scatter(df_converted_data.loc[df_converted_data['Label'] == target, 'Principal Component 1'],\n                df_converted_data.loc[df_converted_data['Label'] == target, 'Principal Component 2'],\n                alpha=0.5,\n                label=(target, train_data_20.get_coarse_label_name(target)),\n                color=colors[i])  # Assigning color from colormap based on index\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('PCA - model na 20 klas')\nplt.grid()\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:17:54.360885Z","iopub.execute_input":"2024-05-20T11:17:54.361798Z","iopub.status.idle":"2024-05-20T11:17:57.573879Z","shell.execute_reply.started":"2024-05-20T11:17:54.361765Z","shell.execute_reply":"2024-05-20T11:17:57.572805Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(15, 10))\nfor i,target in enumerate(targets[0:10]):\n    plt.scatter(df_converted_data.loc[df_converted_data['Label'] == target, 'Principal Component 1'],\n                df_converted_data.loc[df_converted_data['Label'] == target, 'Principal Component 2'],\n                alpha=0.5,\n                label=(target, train_data_20.get_coarse_label_name(target)),\n                color=colors[i]\n               )\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('PCA - model na 20 klas')\nplt.grid()\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:18:01.126637Z","iopub.execute_input":"2024-05-20T11:18:01.127324Z","iopub.status.idle":"2024-05-20T11:18:02.086627Z","shell.execute_reply.started":"2024-05-20T11:18:01.127290Z","shell.execute_reply":"2024-05-20T11:18:02.085705Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(15, 10))\nfor i,target in enumerate(targets[10:20]):\n    plt.scatter(df_converted_data.loc[df_converted_data['Label'] == target, 'Principal Component 1'],\n                df_converted_data.loc[df_converted_data['Label'] == target, 'Principal Component 2'],\n                alpha=0.5,\n                label=(target, train_data_20.get_coarse_label_name(target)),\n                color=colors[i]\n               )\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('PCA - model na 20 klas')\nplt.grid()\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:18:02.088432Z","iopub.execute_input":"2024-05-20T11:18:02.089211Z","iopub.status.idle":"2024-05-20T11:18:03.077300Z","shell.execute_reply.started":"2024-05-20T11:18:02.089176Z","shell.execute_reply":"2024-05-20T11:18:03.076307Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## PCA(3)","metadata":{}},{"cell_type":"code","source":"pca_model_3 = PCA(n_components=3)\nconverted_data_3 = pca_model_3.fit_transform(X)\n\ndf_converted_data_3 = pd.DataFrame(data=converted_data_3, columns=['Principal Component 1', 'Principal Component 2', 'Principal Component 3'])\ndf_converted_data_3['Label'] = y","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:18:10.752719Z","iopub.execute_input":"2024-05-20T11:18:10.753493Z","iopub.status.idle":"2024-05-20T11:18:11.245335Z","shell.execute_reply.started":"2024-05-20T11:18:10.753461Z","shell.execute_reply":"2024-05-20T11:18:11.243995Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%matplotlib inline","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:29:58.516183Z","iopub.execute_input":"2024-05-12T13:29:58.516661Z","iopub.status.idle":"2024-05-12T13:29:58.522382Z","shell.execute_reply.started":"2024-05-12T13:29:58.516630Z","shell.execute_reply":"2024-05-12T13:29:58.521326Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig = plt.figure(figsize=(20, 15))\nax = fig.add_subplot(111, projection='3d')\n\nfor i, target in enumerate(targets):\n    data = df_converted_data_3[df_converted_data_3['Label'] == target]\n    ax.scatter(data['Principal Component 1'], data['Principal Component 2'], data['Principal Component 3'],\n               label=(target, train_data_20.get_coarse_label_name(target)),\n               color=colors[i]\n              )\n\nax.set_xlabel('Principal Component 1')\nax.set_ylabel('Principal Component 2')\nax.set_zlabel('Principal Component 3')\nax.set_xlim(-4, 5)  #\nax.set_ylim(-4, 7) \nax.set_zlim(-4, 6)\nax.set_title('PCA model 20 klas')\nax.legend()\n\nplt.ion()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:18:13.118566Z","iopub.execute_input":"2024-05-20T11:18:13.118965Z","iopub.status.idle":"2024-05-20T11:18:15.580079Z","shell.execute_reply.started":"2024-05-20T11:18:13.118935Z","shell.execute_reply":"2024-05-20T11:18:15.579141Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Model path -> 100 classes","metadata":{}},{"cell_type":"code","source":"saved_model_path='/kaggle/input/cifar-models/resnet_cifar100_100classes_e45.pth'","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:18:19.646353Z","iopub.execute_input":"2024-05-20T11:18:19.646801Z","iopub.status.idle":"2024-05-20T11:18:19.651299Z","shell.execute_reply.started":"2024-05-20T11:18:19.646767Z","shell.execute_reply":"2024-05-20T11:18:19.650290Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"checkpoint = torch.load(saved_model_path)\nnum_classes = 100\n\nnet = resnet18(weights=None)\nnet.conv1 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1, bias=False)\nnet.maxpool = nn.Identity()\nnet.fc = nn.Linear(512, num_classes)\nnet.load_state_dict(checkpoint['model_state_dict'])\nnet.to(device)\n\nmodel_pca = resnet18(weights=None)\nmodel_pca.conv1 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1, bias=False)\nmodel_pca.maxpool = nn.Identity()\nmodel_pca.fc = nn.Linear(512, num_classes)\nmodel_pca.load_state_dict(checkpoint['model_state_dict'])\nmodel_pca.fc=nn.Identity()\nmodel_pca.to(device)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:18:22.191893Z","iopub.execute_input":"2024-05-20T11:18:22.192656Z","iopub.status.idle":"2024-05-20T11:18:23.299368Z","shell.execute_reply.started":"2024-05-20T11:18:22.192624Z","shell.execute_reply":"2024-05-20T11:18:23.298503Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_pca = FeatureExtractor(net)\nmodel_pca.to(device)\nmodel_pca.eval()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:18:23.497333Z","iopub.execute_input":"2024-05-20T11:18:23.498213Z","iopub.status.idle":"2024-05-20T11:18:23.508719Z","shell.execute_reply.started":"2024-05-20T11:18:23.498169Z","shell.execute_reply":"2024-05-20T11:18:23.507816Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"counter = 1\nfeatures = []\nlabels = []\n\nwith torch.no_grad():\n    for (inputs, targets) in train_dl:\n        inputs, targets = inputs.to(device), targets.to(device)\n        for i in range(len(targets)):\n            labels.append(targets[i].to('cpu'))\n        outputs = model_pca(inputs).to(device)\n        for i in range(len(outputs)):\n            output = torch.flatten(outputs[i])\n            features.append(output.to('cpu'))\n        #print('Batch ', counter, '/', len(train_dl_20))\n        counter = counter + 1","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:18:27.071137Z","iopub.execute_input":"2024-05-20T11:18:27.071481Z","iopub.status.idle":"2024-05-20T11:18:42.402626Z","shell.execute_reply.started":"2024-05-20T11:18:27.071455Z","shell.execute_reply":"2024-05-20T11:18:42.401492Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"features_np = [x.numpy() for x in features]\nfeatures_np = np.array(features_np)\n\nlabels_np = np.array([y.squeeze().numpy() for y in labels])","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:18:42.404499Z","iopub.execute_input":"2024-05-20T11:18:42.404825Z","iopub.status.idle":"2024-05-20T11:18:43.112942Z","shell.execute_reply.started":"2024-05-20T11:18:42.404797Z","shell.execute_reply":"2024-05-20T11:18:43.112118Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"features_col = ['Feature' + str(i) for i in range(features_np.shape[1])]\ndf_cifar = pd.DataFrame(features_np, columns = features_col)\ndf_cifar['Label'] = labels_np","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:18:43.114085Z","iopub.execute_input":"2024-05-20T11:18:43.114382Z","iopub.status.idle":"2024-05-20T11:18:43.121922Z","shell.execute_reply.started":"2024-05-20T11:18:43.114358Z","shell.execute_reply":"2024-05-20T11:18:43.120701Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = df_cifar.iloc[:, :-1]  #features bo bez ostatniej col\ny = df_cifar['Label']  #labels","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:18:43.123831Z","iopub.execute_input":"2024-05-20T11:18:43.124112Z","iopub.status.idle":"2024-05-20T11:18:43.175690Z","shell.execute_reply.started":"2024-05-20T11:18:43.124088Z","shell.execute_reply":"2024-05-20T11:18:43.174891Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"coarse_labels=[]\nfor i in range(len(labels_np)):\n    coarse_labels.append(train_data_20.fine_to_coarse[labels_np[i]])\n    \ncoarse_labels_np = np.asarray(coarse_labels)\ndf_cifar['Coarse label']=coarse_labels_np\ny2=df_cifar['Coarse label']","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:18:43.176772Z","iopub.execute_input":"2024-05-20T11:18:43.177111Z","iopub.status.idle":"2024-05-20T11:18:43.216577Z","shell.execute_reply.started":"2024-05-20T11:18:43.177080Z","shell.execute_reply":"2024-05-20T11:18:43.215706Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pca_model = PCA(n_components=2)\nconverted_data = pca_model.fit_transform(X)\n\ndf_converted_data = pd.DataFrame(data=converted_data, columns=['Principal Component 1', 'Principal Component 2'])\ndf_converted_data['Label'] = y2","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:18:43.217564Z","iopub.execute_input":"2024-05-20T11:18:43.217877Z","iopub.status.idle":"2024-05-20T11:18:43.699444Z","shell.execute_reply.started":"2024-05-20T11:18:43.217847Z","shell.execute_reply":"2024-05-20T11:18:43.698117Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_converted_data['Fine labels']=y","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:18:47.519098Z","iopub.execute_input":"2024-05-20T11:18:47.519476Z","iopub.status.idle":"2024-05-20T11:18:47.524575Z","shell.execute_reply.started":"2024-05-20T11:18:47.519448Z","shell.execute_reply":"2024-05-20T11:18:47.523703Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_converted_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-16T16:57:37.680246Z","iopub.execute_input":"2024-05-16T16:57:37.681034Z","iopub.status.idle":"2024-05-16T16:57:37.697685Z","shell.execute_reply.started":"2024-05-16T16:57:37.680997Z","shell.execute_reply":"2024-05-16T16:57:37.696520Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"targets = np.asarray(range(0,20))","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:18:51.108992Z","iopub.execute_input":"2024-05-20T11:18:51.109366Z","iopub.status.idle":"2024-05-20T11:18:51.113954Z","shell.execute_reply.started":"2024-05-20T11:18:51.109335Z","shell.execute_reply":"2024-05-20T11:18:51.112996Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(15, 10))\n#colors = plt.cm.get_cmap('tab20', len(targets))\ncolors = [\n    \"#FF5733\", \"#FFC300\", \"#4CAF50\", \"#00BCD4\", \"#2196F3\",\n    \"#3F51B5\", \"#9C27B0\", \"#FF4081\", \"#4CAF50\", \"#FF9800\",\n    \"#9E9D24\", \"#3E2723\", \"#FF5722\", \"#E91E63\", \"#673AB7\",\n    \"#009688\", \"#FFEB3B\", \"#607D8B\", \"#03A9F4\", \"#FF5722\"\n]\nfor i, target in enumerate(targets):\n    plt.scatter(df_converted_data.loc[df_converted_data['Label'] == target, 'Principal Component 1'],\n                df_converted_data.loc[df_converted_data['Label'] == target, 'Principal Component 2'],\n                alpha=0.5,\n                label=(target, train_data_20.get_coarse_label_name(target)),\n                color=colors[i])  # Assigning color from colormap based on index\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('PCA - model na 100 klas')\nplt.grid()\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:18:52.166691Z","iopub.execute_input":"2024-05-20T11:18:52.167128Z","iopub.status.idle":"2024-05-20T11:18:55.354183Z","shell.execute_reply.started":"2024-05-20T11:18:52.167095Z","shell.execute_reply":"2024-05-20T11:18:55.353227Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(15, 10))\nfor i,target in enumerate(targets[0:10]):\n    plt.scatter(df_converted_data.loc[df_converted_data['Label'] == target, 'Principal Component 1'],\n                df_converted_data.loc[df_converted_data['Label'] == target, 'Principal Component 2'],\n                alpha=0.5,\n                label=(target, train_data_20.get_coarse_label_name(target)),\n                color=colors[i]\n               )\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('PCA - model na 100 klas')\nplt.grid()\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:18:58.846831Z","iopub.execute_input":"2024-05-20T11:18:58.847191Z","iopub.status.idle":"2024-05-20T11:19:00.034241Z","shell.execute_reply.started":"2024-05-20T11:18:58.847165Z","shell.execute_reply":"2024-05-20T11:19:00.033169Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(15, 10))\nfor i,target in enumerate(targets[10:20]):\n    plt.scatter(df_converted_data.loc[df_converted_data['Label'] == target, 'Principal Component 1'],\n                df_converted_data.loc[df_converted_data['Label'] == target, 'Principal Component 2'],\n                alpha=0.5,\n                label=(target, train_data_20.get_coarse_label_name(target)),\n                color=colors[i]\n               )\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('PCA - model na 100 klas')\nplt.grid()\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:19:00.036018Z","iopub.execute_input":"2024-05-20T11:19:00.036729Z","iopub.status.idle":"2024-05-20T11:19:01.961025Z","shell.execute_reply.started":"2024-05-20T11:19:00.036690Z","shell.execute_reply":"2024-05-20T11:19:01.959956Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"colors = [\n    \"#FF5733\", \"#FFC300\", \"#4CAF50\", \"#00BCD4\", \"#2196F3\",\n    \"#3F51B5\", \"#9C27B0\", \"#FF4081\", \"#4CAF50\", \"#FF9800\",\n    \"#9E9D24\", \"#3E2723\", \"#FF5722\", \"#E91E63\", \"#673AB7\",\n    \"#009688\", \"#FFEB3B\", \"#607D8B\", \"#03A9F4\", \"#FF5722\",\n    \"#F44336\", \"#E91E63\", \"#9C27B0\", \"#673AB7\", \"#3F51B5\",\n    \"#2196F3\", \"#03A9F4\", \"#00BCD4\", \"#009688\", \"#4CAF50\",\n    \"#8BC34A\", \"#CDDC39\", \"#FFEB3B\", \"#FFC107\", \"#FF9800\",\n    \"#FF5722\", \"#795548\", \"#9E9E9E\", \"#607D8B\", \"#000000\",\n    \"#FFFF0F\", \"#1ABC9C\", \"#16A085\", \"#2ECC71\", \"#27AE60\",\n    \"#3498DB\", \"#2980B9\", \"#9B59B6\", \"#8E44AD\", \"#34495E\",\n    \"#2C3E50\", \"#F1C40F\", \"#F39C12\", \"#E67E22\", \"#D35400\",\n    \"#E74C3C\", \"#C0392B\", \"#ECF0F1\", \"#BDC3C7\", \"#95A5A6\",\n    \"#7F8C8D\", \"#55E6C1\", \"#4DB6AC\", \"#7AE7E0\", \"#00BFA5\",\n    \"#1DE9B6\", \"#B2FF59\", \"#76FF03\", \"#C6FF00\", \"#FFEA00\",\n    \"#DD2C00\", \"#795548\", \"#616161\", \"#3E2723\", \"#212121\",\n    \"#607D8B\", \"#455A64\", \"#263238\", \"#E65100\", \"#BF360C\",\n    \"#FFD740\", \"#FFAB00\", \"#FF3D00\", \"#DD2C00\", \"#616161\",\n    \"#455A64\", \"#263238\", \"#795548\", \"#E65100\", \"#FFEA00\",\n    \"#FF6D00\", \"#C6FF00\", \"#76FF03\", \"#B2FF59\", \"#1DE9B6\",\n    \"#00B8D4\", \"#9C27B0\", \"#FF4081\", \"#03A9F4\", \"#8BC34A\"\n]\nlen(colors)\ncolors[40]","metadata":{"execution":{"iopub.status.busy":"2024-05-16T17:51:29.652822Z","iopub.execute_input":"2024-05-16T17:51:29.653689Z","iopub.status.idle":"2024-05-16T17:51:29.666666Z","shell.execute_reply.started":"2024-05-16T17:51:29.653636Z","shell.execute_reply":"2024-05-16T17:51:29.665506Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(15, 10))\n#colors = plt.cm.get_cmap('tab20', len(targets))\n\ntargets=range(0,100)\nfor i, target in enumerate(targets):\n    plt.scatter(df_converted_data.loc[df_converted_data['Fine labels'] == target, 'Principal Component 1'],\n                df_converted_data.loc[df_converted_data['Fine labels'] == target, 'Principal Component 2'],\n                alpha=0.5,\n                label=target,\n                color=colors[i])  # Assigning color from colormap based on index\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('PCA - model na 100 klas - 100 klas labels')\nplt.grid()\n#plt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-16T17:52:03.537234Z","iopub.execute_input":"2024-05-16T17:52:03.538168Z","iopub.status.idle":"2024-05-16T17:52:05.442574Z","shell.execute_reply.started":"2024-05-16T17:52:03.538132Z","shell.execute_reply":"2024-05-16T17:52:05.441419Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Model path -> 100 classes model retrained from 20 to 100","metadata":{}},{"cell_type":"code","source":"saved_model_path='/kaggle/input/cifar-models/aftertl_ep67.pth'","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:19:09.975776Z","iopub.execute_input":"2024-05-20T11:19:09.976594Z","iopub.status.idle":"2024-05-20T11:19:09.980846Z","shell.execute_reply.started":"2024-05-20T11:19:09.976547Z","shell.execute_reply":"2024-05-20T11:19:09.979777Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"checkpoint = torch.load(saved_model_path)\nnum_classes = 100\n\nnet = resnet18(weights=None)\nnet.conv1 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1, bias=False)\nnet.maxpool = nn.Identity()\nnet.fc = nn.Linear(512, num_classes)\nnet.load_state_dict(checkpoint['model_state_dict'])\nnet.to(device)\n\nmodel_pca = resnet18(weights=None)\nmodel_pca.conv1 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1, bias=False)\nmodel_pca.maxpool = nn.Identity()\nmodel_pca.fc = nn.Linear(512, num_classes)\nmodel_pca.load_state_dict(checkpoint['model_state_dict'])\nmodel_pca.fc=nn.Identity()\nmodel_pca.to(device)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:19:10.343195Z","iopub.execute_input":"2024-05-20T11:19:10.343547Z","iopub.status.idle":"2024-05-20T11:19:11.187992Z","shell.execute_reply.started":"2024-05-20T11:19:10.343513Z","shell.execute_reply":"2024-05-20T11:19:11.187051Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_pca = FeatureExtractor(net)\nmodel_pca.to(device)\nmodel_pca.eval()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:19:14.300902Z","iopub.execute_input":"2024-05-20T11:19:14.301254Z","iopub.status.idle":"2024-05-20T11:19:14.311439Z","shell.execute_reply.started":"2024-05-20T11:19:14.301227Z","shell.execute_reply":"2024-05-20T11:19:14.310499Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"counter = 1\nfeatures = []\nlabels = []\n\nwith torch.no_grad():\n    for (inputs, targets) in train_dl:\n        inputs, targets = inputs.to(device), targets.to(device)\n        for i in range(len(targets)):\n            labels.append(targets[i].to('cpu'))\n        outputs = model_pca(inputs).to(device)\n        for i in range(len(outputs)):\n            output = torch.flatten(outputs[i])\n            features.append(output.to('cpu'))\n        #print('Batch ', counter, '/', len(train_dl_20))\n        counter = counter + 1","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:19:14.587625Z","iopub.execute_input":"2024-05-20T11:19:14.588031Z","iopub.status.idle":"2024-05-20T11:19:31.397870Z","shell.execute_reply.started":"2024-05-20T11:19:14.588005Z","shell.execute_reply":"2024-05-20T11:19:31.396733Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"features_np = [x.numpy() for x in features]\nfeatures_np = np.array(features_np)\n\nlabels_np = np.array([y.squeeze().numpy() for y in labels])","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:19:31.399979Z","iopub.execute_input":"2024-05-20T11:19:31.400357Z","iopub.status.idle":"2024-05-20T11:19:32.074388Z","shell.execute_reply.started":"2024-05-20T11:19:31.400326Z","shell.execute_reply":"2024-05-20T11:19:32.073485Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"features_col = ['Feature' + str(i) for i in range(features_np.shape[1])]\ndf_cifar = pd.DataFrame(features_np, columns = features_col)\ndf_cifar['Label'] = labels_np\nX = df_cifar.iloc[:, :-1]  #features bo bez ostatniej col\ny = df_cifar['Label']  #labels\n","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:19:32.075507Z","iopub.execute_input":"2024-05-20T11:19:32.075815Z","iopub.status.idle":"2024-05-20T11:19:32.127890Z","shell.execute_reply.started":"2024-05-20T11:19:32.075791Z","shell.execute_reply":"2024-05-20T11:19:32.126854Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"coarse_labels=[]\nfor i in range(len(labels_np)):\n    coarse_labels.append(train_data_20.fine_to_coarse[labels_np[i]])\n    \ncoarse_labels_np = np.asarray(coarse_labels)\ndf_cifar['Coarse label']=coarse_labels_np\ny2=df_cifar['Coarse label']","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:19:32.130284Z","iopub.execute_input":"2024-05-20T11:19:32.130985Z","iopub.status.idle":"2024-05-20T11:19:32.170323Z","shell.execute_reply.started":"2024-05-20T11:19:32.130946Z","shell.execute_reply":"2024-05-20T11:19:32.169430Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## PCA(2)","metadata":{}},{"cell_type":"code","source":"pca_model = PCA(n_components=2)\nconverted_data = pca_model.fit_transform(X)\n\ndf_converted_data = pd.DataFrame(data=converted_data, columns=['Principal Component 1', 'Principal Component 2'])\ndf_converted_data['Label'] = y2","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:19:32.171421Z","iopub.execute_input":"2024-05-20T11:19:32.171759Z","iopub.status.idle":"2024-05-20T11:19:32.679397Z","shell.execute_reply.started":"2024-05-20T11:19:32.171729Z","shell.execute_reply":"2024-05-20T11:19:32.677903Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_converted_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-12T23:04:27.907522Z","iopub.execute_input":"2024-05-12T23:04:27.908259Z","iopub.status.idle":"2024-05-12T23:04:27.918926Z","shell.execute_reply.started":"2024-05-12T23:04:27.908226Z","shell.execute_reply":"2024-05-12T23:04:27.917948Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"targets = np.asarray(range(0,20))","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:19:32.687021Z","iopub.execute_input":"2024-05-20T11:19:32.690434Z","iopub.status.idle":"2024-05-20T11:19:32.699075Z","shell.execute_reply.started":"2024-05-20T11:19:32.690380Z","shell.execute_reply":"2024-05-20T11:19:32.697827Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(15, 10))\n#colors = plt.cm.get_cmap('tab20', len(targets))\ncolors = [\n    \"#FF5733\", \"#FFC300\", \"#4CAF50\", \"#00BCD4\", \"#2196F3\",\n    \"#3F51B5\", \"#9C27B0\", \"#FF4081\", \"#4CAF50\", \"#FF9800\",\n    \"#9E9D24\", \"#3E2723\", \"#FF5722\", \"#E91E63\", \"#673AB7\",\n    \"#009688\", \"#FFEB3B\", \"#607D8B\", \"#03A9F4\", \"#FF5722\"\n]\nfor i, target in enumerate(targets):\n    plt.scatter(df_converted_data.loc[df_converted_data['Label'] == target, 'Principal Component 1'],\n                df_converted_data.loc[df_converted_data['Label'] == target, 'Principal Component 2'],\n                alpha=0.5,\n                label=(target, train_data_20.get_coarse_label_name(target)),\n                color=colors[i])  # Assigning color from colormap based on index\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('PCA - model na 100 klas self transfer')\nplt.grid()\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:19:34.420578Z","iopub.execute_input":"2024-05-20T11:19:34.421253Z","iopub.status.idle":"2024-05-20T11:19:37.592515Z","shell.execute_reply.started":"2024-05-20T11:19:34.421225Z","shell.execute_reply":"2024-05-20T11:19:37.591181Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(15, 10))\nfor i,target in enumerate(targets[0:10]):\n    plt.scatter(df_converted_data.loc[df_converted_data['Label'] == target, 'Principal Component 1'],\n                df_converted_data.loc[df_converted_data['Label'] == target, 'Principal Component 2'],\n                alpha=0.5,\n                label=(target, train_data_20.get_coarse_label_name(target)),\n                color=colors[i]\n               )\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('PCA - model na 100 klas - self transfer')\nplt.grid()\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:19:37.594627Z","iopub.execute_input":"2024-05-20T11:19:37.595025Z","iopub.status.idle":"2024-05-20T11:19:38.560411Z","shell.execute_reply.started":"2024-05-20T11:19:37.594993Z","shell.execute_reply":"2024-05-20T11:19:38.559541Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(15, 10))\nfor i,target in enumerate(targets[10:20]):\n    plt.scatter(df_converted_data.loc[df_converted_data['Label'] == target, 'Principal Component 1'],\n                df_converted_data.loc[df_converted_data['Label'] == target, 'Principal Component 2'],\n                alpha=0.5,\n                label=(target, train_data_20.get_coarse_label_name(target)),\n                color=colors[i]\n               )\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('PCA - model na 100 klas - self transfer')\nplt.grid()\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T11:19:38.561751Z","iopub.execute_input":"2024-05-20T11:19:38.562098Z","iopub.status.idle":"2024-05-20T11:19:39.447340Z","shell.execute_reply.started":"2024-05-20T11:19:38.562067Z","shell.execute_reply":"2024-05-20T11:19:39.446388Z"},"trusted":true},"execution_count":null,"outputs":[]}]}